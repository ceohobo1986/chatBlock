map $http_host $rochatuwsgi {
    hostnames;
    default unix:///home/xxx/xxxsite/data/run/prod.sock;
    test.chatcube.org unix:///home/xxx/xxxsite/data/run/test.sock;
}

map $http_host $rochatrootdir {
    hostnames;
    default /home/xxx/xxxsite/prod/www;
    test.chatcube.org /home/xxx/xxxsite/test/www;
}

server {
    listen       80;
    listen       127.0.0.1:80;
    listen       443 ssl;

    server_name chatcube.org test.chatcube.org api.chatcube.org www.chatcube.org api3.chatcube.org;

    ssl        on;
    ssl_certificate         /etc/nginx/ssl/origin.cert;
    ssl_certificate_key     /etc/nginx/ssl/origin.key;
    ssl_protocols TLSv1.1 TLSv1.2;

    set $project_dir /home/xxx/xxxsite;
    set $uwsgi_socket $rochatuwsgi;
    set $sitecode ROCHAT;

    access_log  /var/log/nginx/chatcube.access.log  main;

    root   $rochatrootdir;

### PUSH STREAM START ###
    location /chan-stats {
        # activate channels statistics mode for this location
        push_stream_channels_statistics;

        # query string based channel id
        push_stream_channels_path               $arg_id;
        allow  127.0.0.1;
        deny all;
    }

    location /pub {
        # activate publisher mode for this location, with admin support
        push_stream_publisher admin;

        # query string based channel id
        push_stream_channels_path               $sitecode.$arg_id;

        # store messages in memory
        push_stream_store_messages              on;

        # Message size limit
        # client_max_body_size MUST be equal to client_body_buffer_size or
        # you will be sorry.
        client_max_body_size                    32k;
        client_body_buffer_size                 32k;

        allow  127.0.0.1;
        deny all;
        break;
    }

    location ~ /sub/(.*) {
        # activate subscriber mode for this location
        push_stream_subscriber;

        # positional channel path
        push_stream_channels_path                   $sitecode.$1;

        # header to be sent when receiving new subscriber connection
        push_stream_header_template                 "<html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\r\n<meta http-equiv=\"Cache-Control\" content=\"no-store\">\r\n<meta http-equiv=\"Cache-Control\" content=\"no-cache\">\r\n<meta http-equiv=\"Pragma\" content=\"no-cache\">\r\n<meta http-equiv=\"Expires\" content=\"Thu, 1 Jan 1970 00:00:00 GMT\">\r\n<script type=\"text/javascript\">\r\nwindow.onError = null;\r\ntry{ document.domain = (window.location.hostname.match(/^(\d{1,3}\.){3}\d{1,3}$/)) ? window.location.hostname : window.location.hostname.split('.').slice(-1 * Math.max(window.location.hostname.split('.').length - 1, (window.location.hostname.match(/(\w{4,}\.\w{2}|\.\w{3,})$/) ? 2 : 3))).join('.');}catch(e){}\r\nparent.PushStream.register(this);\r\n</script>\r\n</head>\r\n<body>";
        # message template
        push_stream_message_template                "<script>p(~id~,'~channel~',~text~,'~event-id~','~time~', '~tag~');</script>";
        # footer to be sent when finishing subscriber connection
        push_stream_footer_template                 "</body></html>";
        # content-type
        default_type                                "text/html; charset=utf-8";

        push_stream_last_received_message_time "$arg_time";
        push_stream_last_event_id              "$arg_eventid";
    }

    location ~ /ev/(.*) {
        # activate event source mode for this location
        push_stream_subscriber eventsource;

        # positional channel path
        push_stream_channels_path              $sitecode.$1;
        push_stream_last_received_message_time "$arg_time";
        push_stream_last_event_id              "$arg_eventid";
    }

    location ~ /lp/(.*) {
        # activate long-polling mode for this location
        push_stream_subscriber      long-polling;

        # positional channel path
        push_stream_channels_path         $sitecode.$1;

        push_stream_last_received_message_time "$arg_time";
        push_stream_last_event_id              "$arg_eventid";
    }

    location ~ /ws/(.*) {
        # activate websocket mode for this location
        push_stream_subscriber websocket;
        
        # positional channel path
        push_stream_channels_path                   $sitecode.$1;
#        if ($arg_tests = "on") {
#          push_stream_channels_path                 "test_$1";
#        }

        # store messages in memory
        push_stream_store_messages              on;

        push_stream_websocket_allow_publish     on;
        push_stream_last_received_message_time "$arg_time";
        push_stream_last_event_id              "$arg_eventid";
    }
### PUSH STREAM END ###

    location /static/ {
         expires 1d;
    }
    location /media/ {
         expires 1d;
    }

    #mobile app browser version handling
    location ~ ^/m/v[0-9.-]+/index\.html$ {
        root   $project_dir;
        add_header 'Cache-Control' 'no-cache, no-store, must-revalidate';
        add_header 'Pragma' 'no-cache';
        expires 0;
        include uwsgi_params;
        uwsgi_pass $uwsgi_socket;
    }
        
    location ~ ^/m/v[0-9.-]+/.*$ {
        expires 365d;
        root   $project_dir;
    }
        
    location /m/test/ {
        root   $project_dir;
        add_header 'Cache-Control' 'no-cache, no-store, must-revalidate';
        add_header 'Pragma' 'no-cache';
        expires 0;
    }

    # api handling
    location / {
        include uwsgi_params;
        uwsgi_pass $uwsgi_socket;
    }    
}
